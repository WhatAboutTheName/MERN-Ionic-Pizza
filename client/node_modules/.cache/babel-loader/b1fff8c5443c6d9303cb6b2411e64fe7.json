{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { axios } from '../axios';\nexport const Http = () => {\n  const token = useSelector(state => state.auth.token);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'get', body = null, header = {}) => {\n    setLoading(true);\n\n    try {\n      let response;\n      axios.defaults.headers.common['Authorization'] = {\n        Authorization: `Bearer ${token}`\n      };\n      response = await axios[method](url, body, {\n        headers: header\n      });\n\n      if (!response.statusText) {\n        throw new Error('Oops! Something went wrong.');\n      }\n\n      setLoading(false);\n      return response;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const cleanError = useCallback(() => setError(null), []);\n\n  const errorHandler = () => {\n    if (error) {\n      console.error(error);\n      cleanError();\n    }\n  };\n\n  return {\n    loading,\n    request,\n    errorHandler,\n    error,\n    cleanError\n  };\n};","map":{"version":3,"sources":["D:/проекты/React/Ionic-pizza/client/src/hooks/http.hook.ts"],"names":["useState","useCallback","useSelector","axios","Http","token","state","auth","loading","setLoading","error","setError","request","url","method","body","header","response","defaults","headers","common","Authorization","statusText","Error","e","message","cleanError","errorHandler","console"],"mappings":"AACA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,UAAtB;AAGA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAEtB,QAAMC,KAAK,GAAGH,WAAW,CAAEI,KAAD,IAAkBA,KAAK,CAACC,IAAN,CAAWF,KAA9B,CAAzB;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMY,OAAO,GAAGX,WAAW,CAAC,OAAOY,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,MAAM,GAAG,EAAlD,KAAyD;AACjFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIQ,QAAJ;AACAd,MAAAA,KAAK,CAACe,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD;AAC7CC,QAAAA,aAAa,EAAG,UAAShB,KAAM;AADc,OAAjD;AAGAY,MAAAA,QAAQ,GAAG,MAAOd,KAAD,CAA+BW,MAA/B,EAAuCD,GAAvC,EAA4CE,IAA5C,EAAkD;AAAEI,QAAAA,OAAO,EAAEH;AAAX,OAAlD,CAAjB;;AACA,UAAI,CAACC,QAAQ,CAACK,UAAd,EAA0B;AACtB,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACH;;AACDd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOQ,QAAP;AACH,KAXD,CAWE,OAAOO,CAAP,EAAU;AACRf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACa,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACH;AACJ,GAlB0B,EAkBxB,EAlBwB,CAA3B;AAoBA,QAAME,UAAU,GAAGzB,WAAW,CAAC,MAAMU,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;;AAEA,QAAMgB,YAAY,GAAG,MAAM;AACvB,QAAIjB,KAAJ,EAAW;AACPkB,MAAAA,OAAO,CAAClB,KAAR,CAAcA,KAAd;AACAgB,MAAAA,UAAU;AACb;AACJ,GALD;;AAMA,SAAO;AAAElB,IAAAA,OAAF;AAAWI,IAAAA,OAAX;AAAoBe,IAAAA,YAApB;AAAkCjB,IAAAA,KAAlC;AAAyCgB,IAAAA;AAAzC,GAAP;AACH,CAnCM","sourcesContent":["import { AxiosInstance } from 'axios';\r\nimport { useState, useCallback } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { axios } from '../axios';\r\nimport { IAuth } from '../store/action-interface';\r\n\r\nexport const Http = () => {\r\n\r\n    const token = useSelector((state: IAuth) => state.auth.token);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'get', body = null, header = {}) => {\r\n        setLoading(true);\r\n        try {\r\n            let response: Response | any;\r\n            axios.defaults.headers.common['Authorization'] = {\r\n                Authorization: `Bearer ${token}`\r\n            }    \r\n            response = await (axios as AxiosInstance | any)[method](url, body, { headers: header });\r\n            if (!response.statusText) {\r\n                throw new Error('Oops! Something went wrong.');\r\n            }\r\n            setLoading(false);\r\n            return response;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const cleanError = useCallback(() => setError(null), []);\r\n\r\n    const errorHandler = () => {\r\n        if (error) {\r\n            console.error(error);\r\n            cleanError();\r\n        }\r\n    }\r\n    return { loading, request, errorHandler, error, cleanError };\r\n}"]},"metadata":{},"sourceType":"module"}
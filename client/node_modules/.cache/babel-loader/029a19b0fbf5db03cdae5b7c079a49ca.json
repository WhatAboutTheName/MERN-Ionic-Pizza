{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { axios } from '../../axios';\nimport { AUTONOTIFICATION } from '../action-types';\nimport { isAdmin, isLogin, userToken, userExpiresIn, userId } from '../actions/auth-actions';\nexport function* autonotificationWatcher() {\n  yield takeEvery(AUTONOTIFICATION, autonotificationWorker);\n}\n\nasync function autonotificationResp(action) {\n  const res = await axios.post('/auth/login', {\n    email: action.payload.email,\n    password: action.payload.password\n  });\n  return 'res';\n}\n\nfunction* autonotificationWorker(action) {\n  try {\n    const res = yield call(autonotificationResp, action);\n    put(isAdmin(res.data.admin));\n    put(isLogin(res.data.isLogin));\n    put(userToken(res.data.token));\n    put(userExpiresIn(res.data.expiresIn));\n    put(userId(res.data.userId));\n  } catch (e) {\n    throw e;\n  }\n}\n\nexport function* logoutMethodWatcher() {\n  yield takeEvery(AUTONOTIFICATION, logoutMethodWorker);\n}\n\nasync function logoutMethodResp(action) {\n  const res = await axios.put('/auth/logout', {\n    userId: action.payload.Id\n  });\n  return 'res';\n}\n\nfunction* logoutMethodWorker(action) {\n  try {\n    const res = yield call(logoutMethodResp, action);\n    put(isAdmin(false));\n    put(isLogin(false));\n    put(userToken(''));\n    put(userExpiresIn('0'));\n    put(userId(''));\n    localStorage.removeItem('isLogin');\n    localStorage.removeItem('token');\n    localStorage.removeItem('expiresIn');\n  } catch (e) {\n    throw e;\n  }\n}","map":{"version":3,"sources":["D:/проекты/React/Ionic-pizza/client/src/store/sagas/auth.ts"],"names":["takeEvery","put","call","axios","AUTONOTIFICATION","isAdmin","isLogin","userToken","userExpiresIn","userId","autonotificationWatcher","autonotificationWorker","autonotificationResp","action","res","post","email","payload","password","data","admin","token","expiresIn","e","logoutMethodWatcher","logoutMethodWorker","logoutMethodResp","Id","localStorage","removeItem"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,SAA3B,EAAsCC,aAAtC,EAAqDC,MAArD,QAAmE,yBAAnE;AAEA,OAAO,UAAUC,uBAAV,GAAoC;AACvC,QAAMV,SAAS,CAACI,gBAAD,EAAmBO,sBAAnB,CAAf;AACH;;AAED,eAAeC,oBAAf,CAAoCC,MAApC,EAAiD;AAC7C,QAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAW,aAAX,EAA0B;AAAEC,IAAAA,KAAK,EAAEH,MAAM,CAACI,OAAP,CAAeD,KAAxB;AAA+BE,IAAAA,QAAQ,EAAEL,MAAM,CAACI,OAAP,CAAeC;AAAxD,GAA1B,CAAlB;AACA,SAAO,KAAP;AACH;;AAED,UAAUP,sBAAV,CAAiCE,MAAjC,EAA8C;AAC1C,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACU,oBAAD,EAA8BC,MAA9B,CAAtB;AACAZ,IAAAA,GAAG,CAACI,OAAO,CAACS,GAAG,CAACK,IAAJ,CAASC,KAAV,CAAR,CAAH;AACAnB,IAAAA,GAAG,CAACK,OAAO,CAACQ,GAAG,CAACK,IAAJ,CAASb,OAAV,CAAR,CAAH;AACAL,IAAAA,GAAG,CAACM,SAAS,CAACO,GAAG,CAACK,IAAJ,CAASE,KAAV,CAAV,CAAH;AACApB,IAAAA,GAAG,CAACO,aAAa,CAACM,GAAG,CAACK,IAAJ,CAASG,SAAV,CAAd,CAAH;AACArB,IAAAA,GAAG,CAACQ,MAAM,CAACK,GAAG,CAACK,IAAJ,CAASV,MAAV,CAAP,CAAH;AACH,GAPD,CAOE,OAAOc,CAAP,EAAU;AACR,UAAMA,CAAN;AACH;AACJ;;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMxB,SAAS,CAACI,gBAAD,EAAmBqB,kBAAnB,CAAf;AACH;;AAED,eAAeC,gBAAf,CAAgCb,MAAhC,EAA6C;AACzC,QAAMC,GAAG,GAAG,MAAMX,KAAK,CAACF,GAAN,CAAU,cAAV,EAA0B;AAAEQ,IAAAA,MAAM,EAAEI,MAAM,CAACI,OAAP,CAAeU;AAAzB,GAA1B,CAAlB;AACA,SAAO,KAAP;AACH;;AAED,UAAUF,kBAAV,CAA6BZ,MAA7B,EAA0C;AACtC,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACwB,gBAAD,EAA0Bb,MAA1B,CAAtB;AACAZ,IAAAA,GAAG,CAACI,OAAO,CAAC,KAAD,CAAR,CAAH;AACAJ,IAAAA,GAAG,CAACK,OAAO,CAAC,KAAD,CAAR,CAAH;AACAL,IAAAA,GAAG,CAACM,SAAS,CAAC,EAAD,CAAV,CAAH;AACAN,IAAAA,GAAG,CAACO,aAAa,CAAC,GAAD,CAAd,CAAH;AACAP,IAAAA,GAAG,CAACQ,MAAM,CAAC,EAAD,CAAP,CAAH;AACAmB,IAAAA,YAAY,CAACC,UAAb,CAAwB,SAAxB;AACAD,IAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAD,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACH,GAVD,CAUE,OAAON,CAAP,EAAU;AACR,UAAMA,CAAN;AACH;AACJ","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { axios } from '../../axios';\r\nimport { AUTONOTIFICATION } from '../action-types';\r\nimport { isAdmin, isLogin, userToken, userExpiresIn, userId } from '../actions/auth-actions';\r\n\r\nexport function* autonotificationWatcher() {\r\n    yield takeEvery(AUTONOTIFICATION, autonotificationWorker);\r\n}\r\n\r\nasync function autonotificationResp(action: any) {\r\n    const res = await axios.post('/auth/login', { email: action.payload.email, password: action.payload.password });\r\n    return 'res';\r\n}\r\n\r\nfunction* autonotificationWorker(action: any) {\r\n    try {\r\n        const res = yield call(autonotificationResp as any, action);\r\n        put(isAdmin(res.data.admin));\r\n        put(isLogin(res.data.isLogin));\r\n        put(userToken(res.data.token));\r\n        put(userExpiresIn(res.data.expiresIn));\r\n        put(userId(res.data.userId));\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport function* logoutMethodWatcher() {\r\n    yield takeEvery(AUTONOTIFICATION, logoutMethodWorker);\r\n}\r\n\r\nasync function logoutMethodResp(action: any) {\r\n    const res = await axios.put('/auth/logout', { userId: action.payload.Id });\r\n    return 'res';\r\n}\r\n\r\nfunction* logoutMethodWorker(action: any) {\r\n    try {\r\n        const res = yield call(logoutMethodResp as any, action);\r\n        put(isAdmin(false));\r\n        put(isLogin(false));\r\n        put(userToken(''));\r\n        put(userExpiresIn('0'));\r\n        put(userId(''));\r\n        localStorage.removeItem('isLogin');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('expiresIn');\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}